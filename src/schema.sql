CREATE TABLE IF NOT EXISTS "public"."beta_users" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "full_name" character varying,
    "email" character varying,
    "company_name" character varying,
    "notes" character varying,
    "reservation_platform" "text"
);

ALTER TABLE "public"."beta_users" OWNER TO "postgres";

ALTER TABLE "public"."beta_users" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."beta_users_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."cfs_widget" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "company_id" "uuid" NOT NULL,
    "site_ids" "text"[] NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "current_cfs" bigint DEFAULT '0'::bigint NOT NULL,
    CONSTRAINT "cfs_widget_current_cfs_check" CHECK (("current_cfs" >= 0))
);

ALTER TABLE "public"."cfs_widget" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."company" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "name" "text" NOT NULL,
    "resmarkEntityId" "text" DEFAULT ''::"text",
    "billing_address" "jsonb",
    "payment_method" "jsonb"
);

ALTER TABLE "public"."company" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."custom_shift" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "company_id" "uuid" NOT NULL,
    "trip_type_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "custom_shift_anchor" "public"."custom_shift_anchor_type" NOT NULL,
    "offset" integer NOT NULL,
    "offset_type" "public"."custom_shift_offset_type" NOT NULL,
    "trip_anchor" "public"."custom_shift_anchor_type" NOT NULL,
    "duration" integer NOT NULL,
    "active" boolean NOT NULL,
    "name" "text" NOT NULL
);

ALTER TABLE "public"."custom_shift" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."customers" (
    "stripe_customer_id" "text" NOT NULL,
    "company_id" "uuid" NOT NULL
);

ALTER TABLE "public"."customers" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."integration" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "company_id" "uuid" NOT NULL,
    "username" "text",
    "api_key" "text",
    "integration_type" "public"."integration_company" DEFAULT 'resmark'::"public"."integration_company" NOT NULL,
    "installation" "text",
    "password" "text",
    "name" "text" DEFAULT ''::"text" NOT NULL
);

ALTER TABLE "public"."integration" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."item" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" DEFAULT ''::"text" NOT NULL,
    "item_type_id" "uuid" NOT NULL,
    "company_id" "uuid" NOT NULL,
    "status" "public"."item_status" DEFAULT 'Normal'::"public"."item_status" NOT NULL,
    "notes" "text" DEFAULT ''::"text" NOT NULL
);

ALTER TABLE "public"."item" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."item_type" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "name" "text" DEFAULT ''::"text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "company_id" "uuid" NOT NULL
);

ALTER TABLE "public"."item_type" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."notification" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "company_id" "uuid" NOT NULL,
    "user_id" "uuid" NOT NULL,
    "title" "text" NOT NULL,
    "message" "text" NOT NULL,
    "is_read" boolean DEFAULT false NOT NULL,
    "href" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."notification" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."prices" (
    "id" "text" NOT NULL,
    "product_id" "text",
    "active" boolean,
    "description" "text",
    "unit_amount" bigint,
    "currency" "text",
    "type" "public"."pricing_type",
    "interval" "public"."pricing_plan_interval",
    "interval_count" integer,
    "trial_period_days" integer,
    "metadata" "jsonb",
    "aggregate_usage" "public"."pricing_aggregate_usage",
    "billing_scheme" "public"."billing_scheme",
    "livemode" boolean,
    "tiers" "jsonb"[],
    "tiers_mode" "public"."pricing_tiers_mode",
    "usage_type" "public"."pricing_usage_type",
    CONSTRAINT "prices_currency_check" CHECK (("char_length"("currency") = 3))
);

ALTER TABLE "public"."prices" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."products" (
    "id" "text" NOT NULL,
    "active" boolean,
    "name" "text",
    "description" "text",
    "image" "text",
    "metadata" "jsonb"
);

ALTER TABLE "public"."products" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."role" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "name" "text" NOT NULL,
    "trip_type_id" "uuid" NOT NULL,
    "active" boolean DEFAULT true NOT NULL,
    "company_id" "uuid" NOT NULL,
    "custom_shift_id" "uuid"
);

ALTER TABLE "public"."role" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."rule_interval" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "rule_scenario_id" "uuid" NOT NULL,
    "min_passengers" integer NOT NULL,
    "max_passengers" integer NOT NULL,
    "company_id" "uuid" NOT NULL
);

ALTER TABLE "public"."rule_interval" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."rule_interval_to_role" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "interval_id" "uuid" NOT NULL,
    "role_id" "uuid" NOT NULL,
    "quantity" integer DEFAULT 0 NOT NULL
);

ALTER TABLE "public"."rule_interval_to_role" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."rule_scenario" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "trip_type_id" "uuid" NOT NULL,
    "company_id" "uuid" NOT NULL
);

ALTER TABLE "public"."rule_scenario" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."shift_request" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "company_id" "uuid" NOT NULL,
    "user_one_id" "uuid" NOT NULL,
    "trip_one_id" "uuid" NOT NULL,
    "user_two_id" "uuid",
    "trip_two_id" "uuid",
    "status" "public"."shift_request_status" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "shift_id" "uuid" NOT NULL,
    "role_one_id" "uuid" NOT NULL,
    "role_two_id" "uuid",
    "reason" "text" DEFAULT ''''''::"text" NOT NULL
);

ALTER TABLE "public"."shift_request" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."subscription" (
    "id" "text" NOT NULL,
    "status" "public"."subscription_status",
    "metadata" "jsonb",
    "cancel_at_period_end" boolean,
    "created" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "current_period_start" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "current_period_end" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "ended_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "cancel_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "canceled_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "trial_start" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "trial_end" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "company_id" "uuid" NOT NULL
);

ALTER TABLE "public"."subscription" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."subscription_item" (
    "id" "text" NOT NULL,
    "company_id" "uuid" NOT NULL,
    "metadata" "jsonb",
    "price_id" "text" NOT NULL,
    "quantity" integer,
    "subscription_id" "text"
);

ALTER TABLE "public"."subscription_item" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."team" (
    "id" bigint NOT NULL,
    "company_id" "uuid" NOT NULL,
    "name" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."team" OWNER TO "postgres";



CREATE TABLE IF NOT EXISTS "public"."training_module" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "name" "text" NOT NULL,
    "company_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "active" boolean DEFAULT true NOT NULL
);

ALTER TABLE "public"."training_module" OWNER TO "postgres";

COMMENT ON COLUMN "public"."training_module"."active" IS 'Whether this training_module is ''live'' or in ''draft mode''';

CREATE TABLE IF NOT EXISTS "public"."training_module_to_role" (
    "training_module_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "role_id" "uuid" NOT NULL
);

ALTER TABLE "public"."training_module_to_role" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."training_module_to_training_section" (
    "training_module_id" "uuid" NOT NULL,
    "training_section_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."training_module_to_training_section" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."training_section" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "name" "text" NOT NULL,
    "company_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "active" boolean DEFAULT true NOT NULL
);

ALTER TABLE "public"."training_section" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."training_segment" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "company_id" "uuid" NOT NULL,
    "name" "text" NOT NULL,
    "sort_order" integer,
    "file_upload_required" boolean DEFAULT false NOT NULL,
    "training_section_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "active" boolean DEFAULT true NOT NULL
);

ALTER TABLE "public"."training_segment" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."trip" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "published" boolean DEFAULT false NOT NULL,
    "seats_left" integer,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "company_id" "uuid" NOT NULL,
    "trip_type_id" "uuid" NOT NULL,
    "launch" integer DEFAULT 1 NOT NULL,
    "default_end_date" timestamp without time zone NOT NULL,
    "default_start_date" timestamp without time zone NOT NULL,
    "notes" "text",
    "booked_passengers" integer,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "imported_notes" "text",
    "tiers" "text",
    "integration_fk" "text",
    "orders" "jsonb"[],
    "color" "public"."color",
    "custom_start_date" timestamp without time zone,
    "custom_end_date" timestamp without time zone,
    "start_date" timestamp without time zone GENERATED ALWAYS AS (COALESCE("custom_start_date", "default_start_date")) STORED NOT NULL,
    "end_date" timestamp without time zone GENERATED ALWAYS AS (COALESCE("custom_end_date", "default_end_date")) STORED NOT NULL
);

COMMENT ON COLUMN "public"."trip"."start_date" IS 'This is when the trip starts for the user/guide';
COMMENT ON COLUMN "public"."trip"."end_date" IS 'This is when the trip ends for the user/guide';

ALTER TABLE "public"."trip" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."trip_to_item" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "trip_id" "uuid" NOT NULL,
    "item_id" "uuid" NOT NULL,
    "company_id" "uuid" NOT NULL
);

ALTER TABLE "public"."trip_to_item" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."trip_to_user_to_role" (
    "user_id" "uuid" NOT NULL,
    "trip_id" "uuid" NOT NULL,
    "role_id" "uuid",
    "assigned_at" timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "company_id" "uuid" NOT NULL,
    "participation_status" "public"."participation_status" DEFAULT 'NEEDS-ACTION'::"public"."participation_status" NOT NULL,
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL
);

ALTER TABLE "public"."trip_to_user_to_role" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."trip_type" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "custom_name" "text",
    "num_nights" integer DEFAULT 0 NOT NULL,
    "miles" integer DEFAULT 0 NOT NULL,
    "rig_buffer" integer DEFAULT 0 NOT NULL,
    "derig_buffer" integer DEFAULT 0 NOT NULL,
    "min_passengers_per_boat" integer DEFAULT 1 NOT NULL,
    "max_passengers_per_boat" integer DEFAULT 1 NOT NULL,
    "min_passengers_per_trip" integer DEFAULT 1 NOT NULL,
    "max_passengers_per_trip" integer DEFAULT 1 NOT NULL,
    "num_launches" integer DEFAULT 1 NOT NULL,
    "trip_config_type" "public"."trip_config_type" DEFAULT 'Base'::"public"."trip_config_type" NOT NULL,
    "company_id" "uuid" NOT NULL,
    "color" "public"."color" DEFAULT 'blue'::"public"."color" NOT NULL,
    "published" boolean DEFAULT true NOT NULL,
    "sort_order" integer DEFAULT 1 NOT NULL,
    "trip_end_time" timestamp with time zone DEFAULT "now"() NOT NULL,
    "trip_start_time" timestamp with time zone DEFAULT "now"() NOT NULL,
    "schedule_grouping" integer DEFAULT 1 NOT NULL,
    "max_users_per_trip" integer DEFAULT 1 NOT NULL,
    "min_users_per_trip" integer DEFAULT 1 NOT NULL,
    "active" boolean DEFAULT true NOT NULL,
    "custom_trip_type" boolean DEFAULT false NOT NULL,
    "imported_from_resmark" boolean DEFAULT false NOT NULL,
    "days_counted_as_work" numeric(65,30) DEFAULT 0 NOT NULL,
    "show_on_trip_list_table" boolean DEFAULT true NOT NULL,
    "integration_fk" "text",
    "integration_type" "public"."integration_company",
    "active_rule_scenario_id" "uuid",
    "parent_integration_id" "uuid",
    "imported_name" "text",
    "time_off_approval_required" boolean,
    "name" "text" GENERATED ALWAYS AS (COALESCE("custom_name", "imported_name", ''::"text")) STORED,
    "approval_required_for_swap" boolean DEFAULT true NOT NULL,
    CONSTRAINT "check_approval_required" CHECK (((("trip_config_type" = 'time_off'::"public"."trip_config_type") AND ("time_off_approval_required" IS NOT NULL)) OR (("trip_config_type" <> 'time_off'::"public"."trip_config_type") AND ("time_off_approval_required" IS NULL))))
);

ALTER TABLE "public"."trip_type" OWNER TO "postgres";

COMMENT ON COLUMN "public"."trip_type"."rig_buffer" IS 'rig times in minutes (not hours)';

COMMENT ON COLUMN "public"."trip_type"."derig_buffer" IS 'derig time in minutes';

CREATE TABLE IF NOT EXISTS "public"."usage_record" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "company_id" "uuid" NOT NULL,
    "usage_amount" integer NOT NULL
);

ALTER TABLE "public"."usage_record" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."user" (
    "id" "uuid" NOT NULL,
    "full_name" "text" NOT NULL,
    "avatar_url" "text",
    "email" character varying NOT NULL,
    "access_type" "public"."access_type" DEFAULT 'Random'::"public"."access_type" NOT NULL,
    "phone_number" "text",
    "company_id" "uuid" NOT NULL,
    "active" boolean DEFAULT true NOT NULL,
    "hire_date" "date" DEFAULT "now"() NOT NULL,
    "updated_at" timestamp without time zone,
    "first_name" "text",
    "nickname" "text",
    "last_name" "text",
    "display_name" "text" GENERATED ALWAYS AS (
CASE
    WHEN ("nickname" IS NOT NULL) THEN "nickname"
    WHEN (("first_name" IS NOT NULL) AND ("last_name" IS NOT NULL)) THEN (("first_name" || ' '::"text") || "last_name")
    WHEN ("first_name" IS NOT NULL) THEN "first_name"
    WHEN ("last_name" IS NOT NULL) THEN "last_name"
    ELSE COALESCE("full_name", ''::"text")
END) STORED NOT NULL
);

ALTER TABLE "public"."user" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."user_to_role" (
    "user_id" "uuid" NOT NULL,
    "role_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."user_to_role" OWNER TO "postgres";

COMMENT ON TABLE "public"."user_to_role" IS 'Join table containing the roles each user has qualified for';

CREATE TABLE IF NOT EXISTS "public"."user_to_segment" (
    "completed_by_user_id" "uuid" NOT NULL,
    "segment_id" "uuid" NOT NULL,
    "date_completed" timestamp with time zone DEFAULT "now"() NOT NULL,
    "signed_off_by_user_id" "uuid" NOT NULL,
    "file_url" "text",
    "file_expiration" timestamp without time zone
);

ALTER TABLE "public"."user_to_segment" OWNER TO "postgres";